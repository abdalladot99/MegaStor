@model ChangePasswordViewModel

<div class="account-page">
    <div class="container">
        <!-- Page Header -->
        <div class=" text-center mb-1">
            <h1 class="page-title">@ViewBag.Action</h1>
            <p class="page-subtitle">Manage your profile and account settings</p>
        </div>

        @await Component.InvokeAsync("AccountInformation")


        <div class="row">

            @await Html.PartialAsync("_QuickActionsInProfile")


            <!-- Change Password -->
            <div class="password-card card border-0 shadow-sm mb-4 col-lg">
               
               
                <div class="modal-header">
                    <h5 class="card-title mb-0">Change Password</h5>
                    <a asp-controller="AccountServices" asp-action="MyAccount" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></a>

                </div>
                <div class="card-body">
                    <form asp-controller="AccountServices" asp-action="ChangePassword" method="post" id="passwordForm">
                        <div class="mb-3">
                            <label for="currentPassword" class="form-label">Current Password</label>
                            <div class="input-group">
                                <input type="password" class="form-control" id="currentPassword" asp-for="CurrentPassword" required>
                                <button class="btn btn-outline-secondary toggle-password" type="button">
                                    <i class="bi bi-eye"></i>
                                </button>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label for="newPassword" class="form-label">New Password</label>
                            <div class="input-group">
                                <input type="password" class="form-control" id="newPassword" asp-for="NewPassword" required>
                                <button class="btn btn-outline-secondary toggle-password" type="button">
                                    <i class="bi bi-eye"></i>
                                </button>
                            </div>
                            <div class="password-strength mt-2">
                                <div class="progress" style="height: 5px;">
                                    <div class="progress-bar" id="passwordStrengthBar" asp-for="CurrentPassword" style="width: 0%"></div>
                                </div>
                                <small class="text-muted">Password must be at least 8 characters with uppercase, lowercase, number and special character</small>
                            </div>
                        </div>
                        <div class="mb-4">
                            <label for="confirmPassword" class="form-label">Confirm New Password</label>
                            <div class="input-group">
                                <input type="password" class="form-control" id="confirmPassword" asp-for="ConfirmPassword" required>
                                <button class="btn btn-outline-secondary toggle-password" type="button">
                                    <i class="bi bi-eye"></i>
                                </button>
                            </div>
                            <div id="passwordMatch" class="mt-1 small"></div>
                        </div>
                        <input type="hidden" asp-for="UserId">
                        <button type="submit" class="btn btn-primary w-100">Update Password</button>
                    </form>
                </div>
            </div>


        </div>
    </div>
</div>

 
@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Toggle password visibility
            document.querySelectorAll('.toggle-password').forEach(button => {
                button.addEventListener('click', function() {
                    const input = this.parentElement.querySelector('input');
                    const icon = this.querySelector('i');
                    const type = input.getAttribute('type') === 'password' ? 'text' : 'password';
                    input.setAttribute('type', type);
                    icon.classList.toggle('bi-eye');
                    icon.classList.toggle('bi-eye-slash');
                });
            });

            // Password strength indicator
            const newPasswordInput = document.getElementById('newPassword');
            const confirmPasswordInput = document.getElementById('confirmPassword');
            const passwordStrengthBar = document.getElementById('passwordStrengthBar');
            const passwordMatchIndicator = document.getElementById('passwordMatch');

            newPasswordInput.addEventListener('input', function() {
                const password = this.value;
                let strength = 0;

                // Length check
                if (password.length >= 8) strength += 25;

                // Contains uppercase
                if (/[A-Z]/.test(password)) strength += 25;

                // Contains lowercase
                if (/[a-z]/.test(password)) strength += 25;

                // Contains number or special char
                if (/[0-9]/.test(password) || /[^A-Za-z0-9]/.test(password)) strength += 25;

                passwordStrengthBar.style.width = strength + '%';

                // Update color based on strength
                if (strength < 50) {
                    passwordStrengthBar.className = 'progress-bar bg-danger';
                } else if (strength < 75) {
                    passwordStrengthBar.className = 'progress-bar bg-warning';
                } else {
                    passwordStrengthBar.className = 'progress-bar bg-success';
                }

                // Check password match
                checkPasswordMatch();
            });

            confirmPasswordInput.addEventListener('input', checkPasswordMatch);

            function checkPasswordMatch() {
                if (newPasswordInput.value && confirmPasswordInput.value) {
                    if (newPasswordInput.value === confirmPasswordInput.value) {
                        passwordMatchIndicator.innerHTML = '<i class="bi bi-check-circle-fill text-success"></i> Passwords match';
                    } else {
                        passwordMatchIndicator.innerHTML = '<i class="bi bi-exclamation-circle-fill text-danger"></i> Passwords do not match';
                    }
                } else {
                    passwordMatchIndicator.innerHTML = '';
                }
            }
             

            // Form validation
            document.getElementById('passwordForm').addEventListener('submit', function(e) {
                if (newPasswordInput.value !== confirmPasswordInput.value) {
                    e.preventDefault();
                    alert('New password and confirmation do not match!');
                    return;
                }

                if (newPasswordInput.value.length < 8) {
                    e.preventDefault();
                    alert('Password must be at least 8 characters long!');
                    return;
                }
            });

           
        });
    </script>
}